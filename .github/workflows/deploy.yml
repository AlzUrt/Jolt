name: Deploy React App and PHP Backend

on:
  push:
    branches:
      - main  # DÃ©clenche le workflow sur les pushs vers la branche main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install
      working-directory: ./frontend

    - name: Build React app
      id: build-frontend
      run: npm run build
      working-directory: ./frontend

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'

    - name: Create DATABASE_URL
      run: |
        echo "DATABASE_URL=mysql://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
      working-directory: ./backend

    - name: Create .env file
      run: |
        echo "APP_ENV=dev" > ./backend/.env
        echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> ./backend/.env
        echo "DATABASE_URL=$DATABASE_URL" >> ./backend/.env
        echo "CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'" >> ./backend/.env
        echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem" >> ./backend/.env
        echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem" >> ./backend/.env
        echo "JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}" >> ./backend/.env

    - name: Install Composer dependencies
      run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
      working-directory: ./backend

    - name: Cache Composer packages
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/backend/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Set execute permission for console
      run: chmod +x ./backend/bin/console
      working-directory: ./

    - name: Check Symfony requirements
      run: php bin/console about
      working-directory: ./backend

    - name: Build backend
      id: build-backend
      run: |
        # Add your backend build command here
        # For example, if you're using Symfony, you might run `php bin/console cache:clear --env=prod` and `php bin/console assets:install --env=prod`

deploy:
  needs: build
  if: ${{ needs.build.outcome == 'success' && steps.build-frontend.outcome == 'success' && steps.build-backend.outcome == 'success' }}
  runs-on: ubuntu-latest

  steps:
  - name: Deploy to Hostinger via FTP
    uses: SamKirkland/FTP-Deploy-Action@4.1.0
    with:
      server: 213.130.145.28
      username: ${{ secrets.FTP_USERNAME }}
      password: ${{ secrets.FTP_PASSWORD }}
