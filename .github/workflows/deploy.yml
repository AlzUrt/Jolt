name: Deploy React App and PHP Backend

on:
  push:
    branches:
      - main  # Déclenche le workflow sur les pushs vers la branche main

jobs:
  frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install
      working-directory: ./frontend

    - name: Build React app
      run: npm run build
      working-directory: ./frontend

  backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'

    - name: Create DATABASE_URL environment variable
      run: |
        echo "DATABASE_URL=mysql://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
      working-directory: ./backend

    - name: Create .env file
      run: |
        echo "APP_ENV=dev" > ./backend/.env
        echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> ./backend/.env
        echo "DATABASE_URL=$DATABASE_URL" >> ./backend/.env
        echo "CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'" >> ./backend/.env
        echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem" >> ./backend/.env
        echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem" >> ./backend/.env
        echo "JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}" >> ./backend/.env

    - name: Install Composer dependencies
      run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
      working-directory: ./backend

    - name: Cache Composer packages
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/backend/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Set execute permission for console
      run: chmod +x ./backend/bin/console
      working-directory: ./

    - name: Check Symfony requirements
      run: php bin/console about
      working-directory: ./backend

  deploy:
    needs: [frontend, backend]  # Ce job s'exécute seulement si frontend et backend ont réussi
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Hostinger via FTP
        uses: SamKirkland/FTP-Deploy-Action@4.1.0
        with:
          server: 213.130.145.28
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./frontend/build/
          server-dir: /public_html/

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ssh-chabertamaury.alwaysdata.net >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy backend files to server via rsync
        run: rsync -avz --exclude '.env' --delete --exclude 'vendor/' --exclude 'var/' -e "ssh -o StrictHostKeyChecking=no" ./backend/ chabertamaury@ssh-chabertamaury.alwaysdata.net:/home/chabertamaury/www/backend/
        working-directory: ./

      - name: Create .env file on server
        run: |
          ssh -o StrictHostKeyChecking=no chabertamaury@ssh-chabertamaury.alwaysdata.net "echo 'APP_ENV=dev' > /home/chabertamaury/www/backend/.env && \
          echo 'APP_SECRET=${{ secrets.APP_SECRET }}' >> /home/chabertamaury/www/backend/.env && \
          echo 'DATABASE_URL=\"mysql://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}\"' >> /home/chabertamaury/www/backend/.env && \
          echo 'CORS_ALLOW_ORIGIN=^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$' >> /home/chabertamaury/www/backend/.env && \
          echo 'JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem' >> /home/chabertamaury/www/backend/.env && \
          echo 'JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem' >> /home/chabertamaury/www/backend/.env && \
          echo 'JWT_TOKEN=${{ secrets.JWT_PASSPHRASE }}' >> /home/chabertamaury/www/backend/.env"

      - name: Install and Verify Composer on server
        run: |
          ssh -o StrictKeyChecking=no chabertamaury@ssh-chabertamaury.alwaysdata.net "/home/chabertamaury/bin/composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader -d /home/chabertamaury/www/backend"
      
      - name: Generate JWT Private and Public Keys
        run: |
          ssh -o StrictKeyChecking=no chabertamaury@ssh-chabertamaury.alwaysdata.net "\
          mkdir -p /home/chabertamaury/www/backend/config/jwt && \
          openssl genrsa -out /home/chabertamaury/www/backend/config/jwt/private.pem 2048 && \
          openssl rsa -in /home/chabertamaury/www/backend/config/jwt/private.pem -pubout -out /home/chabertamaury/www/backend/config/jwt/public.pem"
      
      - name: Set permissions for JWT keys
        run: |
          ssh -o StrictKeyChecking=no chabertamaury@ssh-chabertamaury.alwaysdata.net "chmod 644 /home/chabertamaury/www/backend/config/jwt/public.pem && \
          chmod 600 /home/chabertamaury/www/backend/config/jwt/private.pem"

      - name: Create doctrine.yaml file on server
        run: |
          ssh -o StrictKeyChecking=no chabertamaury@ssh-chabertamaury.alwaysdata.net "echo '${{ secrets.ENCODED_DOCTRINE_YAML }}' | base64 --decode > /home/chabertamaury/www/backend/config/packages/doctrine.yaml"
